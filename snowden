#!/usr/bin/perl -w

use strict;
BEGIN { push @INC, q{/home/keithw/rotisserie} }
require q{login.pl};
use HTML::Entities;
use POSIX;

print qq{Content-type: text/html\n\n};

print_header( q{Edward Snowden and the Evidence (400 words)} );

my $dbh = &database;

my $assignment = q{snowden};

my ( $sunetid, $display_name, $first_name, $class ) = login ( $dbh );

print qq{<h4>Welcome, ${first_name}.</h4><p>};

print q{During a videoconferenced visit to Stanford in 2015, Edward Snowden described the goal of his revelations about the NSA’s collection programs as efforts to <a href="http://www.stanforddaily.com/2015/05/18/edward-snowden-talks-ethics-of-whistleblowing/">improve societal well-being by revealing and ultimately dismantling the NSA’s metadata collection programs</a>, serving the public interest by bringing attentino to privacy issues while also mitigating security risks.<p><hr><p>};

print q{Please flip a coin once (<b>really</b> flip it!). Prepare a 400-word persuasive essay arguing that (if heads) Edward Snowden was successful at improving societal well-being and his disclosures served the public interest, OR (if tails) that Edward Snowden did not improve societal well-being and his disclosures did not serve the public interest. Imagine that your essay will be read by a U.S. court trying Snowden in absentia, or by a government official deciding whether he deserves a pardon. (Your essay will also be seen and responded to
by a fellow classmate.) Your arguments should focus on the effects of Snowden&rsquo;s actions rather than on his personal character or aspects of his private life.<p>

Use persuasive evidence (citing to news reports, documents Snowden released, and to relevant disclosures about U.S. and other surveillance), and structure your essay with bolded subheadings for your major points. State your thesis and include an executive summary of the argument at the beginning.<p>};

print q{<div class="well">Examples of persuasive writing you may find helpful:
<ul>
<li><a href="https://cs181.keithw.org/yoyodyne.pdf">Example persuasive memo at Stanford</a>
<li><a href="http://web.cs.ucdavis.edu/~rogaway/papers/moral.html">Rogaway&rsquo;s &ldquo;The Moral Character of Cryptographic Work&rdquo;</a>
<li><a href="http://laurakipnis.com/wp-content/uploads/2010/08/My-Title-IX-Inquisition-The-Chronicle-Review-.pdf">Laura Kipnis&rsquo;s &ldquo;My Title IX Inquisition&rdquo;</a>
<li><a href="https://medium.com/basic-income/self-driving-trucks-are-going-to-hit-us-like-a-human-driven-truck-b8507d9c5961">Argument in favor of a universal basic income</a>
<li><a href="http://www.columbia.edu/~col8/lobsterarticle.pdf">David Foster Wallace&rsquo;s &ldquo;Consider the Lobster&rdquo;</a>
<li><a href="http://www.utilitarian.net/singer/by/1972----.htm">Peter Singer&rsquo;s &ldquo;Famine, Affluence, and Morality&rdquo;</a>

</ul></div><p>};

print q{Please save your memo often, and save your final version
before 5 p.m. on Friday, October 19. After the assignments are
posted, we will open the page of essays to all students and will ask
you to reply to another (randomly chosen) student's essay.<p><hr><p>};

my $text = qq{<b>Coin came up:</b> [please fill in heads or tails]<p>};
my $timestamp = q{never};

my $lastversion = $dbh->prepare( q{SELECT contents, EXTRACT(EPOCH FROM submitted) AS timestamp FROM writing WHERE sunetid = ? AND assignment = ? ORDER BY submitted DESC LIMIT 1} ) or die qq{$DBI::errstr};

$lastversion->execute( $sunetid, $assignment ) or die qq{$DBI::errstr};

if ( my $data = $lastversion->fetchrow_hashref ) {
    $text = HTML::Entities::encode_entities( $data->{ contents } );
    $timestamp = POSIX::strftime( q{%B %e, %I:%M %p}, localtime $data->{ timestamp } );
    $timestamp =~ s{AM}{a.m.}g;
    $timestamp =~ s{PM}{p.m.}g;
}

print <<"END";
<script type="text/javascript">
var update_wordcount = function( text ) {
   text2 = text.replace( /[ \\t\\n]+/g, " " );
   var wordcount = text2.split( " " ).length;
   wordcount = Math.round( wordcount / 10.0 ) * 10;
   document.getElementById("wordcount").innerHTML = wordcount;
};

var orig_text = "";

var reset_orig_text = function() {
   orig_text = document.getElementById("trix-editor").editor.element.innerHTML;
};

var is_clean = function() {
   return orig_text === document.getElementById("trix-editor").editor.element.innerHTML;
};

var update_dirty = function() {
   document.getElementById("dirty").innerHTML = is_clean() ? "" : "(you have unsaved changes)";
   document.getElementById("submitbutton").disabled = is_clean();
};

document.addEventListener("trix-change", function() { update_wordcount( document.getElementById("trix-editor").editor.getDocument().toString() ); update_dirty(); } );

document.addEventListener("trix-initialize", function() {
   update_wordcount( document.getElementById("trix-editor").editor.getDocument().toString() );
   reset_orig_text();
   update_dirty();
} );

window.addEventListener("beforeunload", function( event ) {
   if ( !is_clean() ) {
      event.preventDefault();
      event.returnValue = "You have unsaved changes.";
      return "You have unsaved changes.";
   }
});
</script>

<style type="text/css">
#submitbutton[disabled] {
        cursor: not-allowed;
        pointer-events: none;

        /*Button disabled - CSS color class*/
        color: #c0c0c0;
}
</style>

<form action='/submit' method='post' onsubmit="reset_orig_text()">
<input id='default' type='hidden' name='content' value='${text}'>
<trix-editor id='trix-editor' input='default'></trix-editor>
<input name='assignment' type='hidden' value='${assignment}'><br>
<div class="col-md-7"><span class="text-muted">Word count:</span> about <span id="wordcount"></span>.<br><span class="text-muted">Last saved:</span> ${timestamp}</span> <span id="dirty"></span></div>
<div class="col-md-5"><div align="right"><input id='submitbutton' type='submit' value='Save' disabled='true'><br><span class="text-muted">(can continue to edit until the deadline)</span></div></div>
</form>
END

# get the responder
my $find_response_responder = $dbh->prepare( q{SELECT sunetid FROM rotisserie WHERE responds_to = ? AND assignment = ?} ) or die qq {$DBI::errstr};

my $getname = $dbh->prepare( q{SELECT name FROM hits WHERE sunetid = ? ORDER BY timestamp DESC LIMIT 1} ) or die qq{$DBI::errstr};

$find_response_responder->execute( $sunetid, $assignment ) or die qq{$DBI::errstr};
if ( my $frr = $find_response_responder->fetchrow_hashref ) {
    $lastversion->execute( $frr->{ sunetid }, $assignment . q{response} ) or die qq{$DBI::errstr};
    if ( my $lv = $lastversion->fetchrow_hashref ) {
        my $sunetid2 = HTML::Entities::encode_entities( $frr->{ sunetid } );
        $getname->execute( $frr->{ sunetid } ) or die qq{$DBI::errstr};
        my $name2 = q{unknown};
        if ( my $n = $getname->fetchrow_hashref ) { $name2 = HTML::Entities::encode_entities( $n->{ name } ); }
        HTML::Entities::encode_entities( $lv->{ name } );
        my $timestamp2 = POSIX::strftime( q{%B %e, %I:%M %p}, localtime $lv->{ timestamp } );
        $timestamp2 =~ s{AM}{a.m.}g;
        $timestamp2 =~ s{PM}{p.m.}g;
	
        my $text3 = $lv->{ contents };
        $text3 =~ s{[ \t\n]+/}{ }g;
        my $wordcount2 = scalar (split / +/, $text3);
        $wordcount2 = 10 * int( $wordcount2 / 10.0 + 0.5 );

        print qq{<div class="col-xs-12"><p><hr><p></div><div class="col-xs-1"></div><div class="col-xs-11"><h5 id="response-header">Response by ${name2} <span class="text-muted">&lt;${sunetid2}&gt;, about $wordcount2 words</span></h5>};
        print qq{<div class="well trix-content" id="response">$lv->{ contents }</div></div><br>};
    }
    print qq{<p><hr><p>};
}

&finish;
