#!/usr/bin/perl -w

use strict;
require q{login.pl};
use HTML::Entities;
use POSIX;

print qq{Content-type: text/html\n\n};

print_header( q{Submissions to the COMPAS assignment} );

my $dbh = &database;

my $assignment = q{compas};

my ( $sunetid, $display_name, $first_name, $class ) = login ( $dbh );

if ( $class ne q{staff} ) {
  print qq{<h4>This page is limited to CS181/181W staff.</h4>};
  &finish;
}

my $all_last_versions = $dbh->prepare( q{SELECT DISTINCT ON (writing.sunetid) writing.sunetid, hits.name, EXTRACT(EPOCH FROM submitted) AS timestamp, contents FROM writing, users, hits WHERE assignment = ? AND writing.sunetid=users.sunetid AND writing.sunetid=hits.sunetid AND class != 'staff' ORDER BY sunetid, submitted DESC} ) or die qq{$DBI::errstr};

$all_last_versions->execute( $assignment ) or die qq{$DBI::errstr};

my $find_response_responder = $dbh->prepare( q{SELECT sunetid FROM rotisserie WHERE responds_to = ? AND assignment = ?} ) or die qq{$DBI::errstr};

my $lastversion = $dbh->prepare( q{SELECT contents, EXTRACT(EPOCH FROM submitted) AS timestamp FROM writing WHERE sunetid = ? AND assignment = ? ORDER BY submitted DESC LIMIT 1} ) or die qq{$DBI::errstr};

my $getname = $dbh->prepare( q{SELECT name FROM hits WHERE sunetid = ? ORDER BY timestamp DESC LIMIT 1} ) or die qq{$DBI::errstr};

while ( my $data = $all_last_versions->fetchrow_hashref ) {
    my $sunetid = HTML::Entities::encode_entities( $data->{ sunetid } );
    my $name = HTML::Entities::encode_entities( $data->{ name } );
    my $timestamp = POSIX::strftime( q{%B %e, %I:%M %p}, localtime $data->{ timestamp } );
    $timestamp =~ s{AM}{a.m.}g;
    $timestamp =~ s{PM}{p.m.}g;

    my $text2 = $data->{ contents };
    $text2 =~ s{[ \t\n]+/}{ }g;
    my $wordcount = scalar (split / +/, $text2);
    $wordcount = 10 * int( $wordcount / 10.0 + 0.5 );

    print qq{<h4 id="essay-header">${name} <span class="text-muted">&lt;${sunetid}&gt;, about $wordcount words</span></h4>};
    print qq{<div class="well trix-content" id="essay">$data->{ contents }</div>};

    # get the responder
    $find_response_responder->execute( $data->{ sunetid }, $assignment ) or die qq{$DBI::errstr};
    if ( my $frr = $find_response_responder->fetchrow_hashref ) {
      $lastversion->execute( $frr->{ sunetid }, $assignment . q{response} ) or die qq{$DBI::errstr};
      if ( my $lv = $lastversion->fetchrow_hashref ) {
	my $sunetid2 = HTML::Entities::encode_entities( $frr->{ sunetid } );
	$getname->execute( $frr->{ sunetid } ) or die qq{$DBI::errstr};
	my $name2 = q{unknown};
	if ( my $n = $getname->fetchrow_hashref ) { $name2 = HTML::Entities::encode_entities( $n->{ name } ); }
	HTML::Entities::encode_entities( $lv->{ name } );
	my $timestamp2 = POSIX::strftime( q{%B %e, %I:%M %p}, localtime $lv->{ timestamp } );
	$timestamp2 =~ s{AM}{a.m.}g;
	$timestamp2 =~ s{PM}{p.m.}g;

	my $text3 = $lv->{ contents };
	$text3 =~ s{[ \t\n]+/}{ }g;
	my $wordcount2 = scalar (split / +/, $text3);
	$wordcount2 = 10 * int( $wordcount2 / 10.0 + 0.5 );

	print qq{<div class="col-xs-1"></div><div class="col-xs-11"><h5 id="response-header">Response by ${name2} <span class="text-muted">&lt;${sunetid2}&gt;, about $wordcount2 words</span></h5>};
	print qq{<div class="well trix-content" id="response">$lv->{ contents }</div></div><br>};
      }
      print qq{<p><hr><p>};
    }
}

&finish;
