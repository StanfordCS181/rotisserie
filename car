#!/usr/bin/perl -w

use strict;
BEGIN { push @INC, q{/home/keithw/rotisserie} }
require q{login.pl};
use HTML::Entities;
use POSIX;

print qq{Content-type: text/html\n\n};

print_header( q{Autonomous Vehicles: Persuasive Memo (350 words)} );

my $dbh = &database;

my ( $sunetid, $display_name, $first_name, $class ) = login ( $dbh, 0 );

print qq{<h4>Welcome, ${first_name} <span class="text-muted">(${class})</span>.</h4><p>};

print <<END;
You have recently joined a small startup working on autonomous
vehicles. Recently, there has been much scrutiny over autonomous
cars after a video surfaced of a competitor’s vehicle killing a
pedestrian during a test run. The chief executive of your competition came out
during a press conference earlier this week and clarified that the car
had prioritized the life of the driver. The car was trying to avoid a
collision with an incoming tractor-trailer and had swerved to avoid
the accident, knowing that the pedestrian would be hit.

This death caused a media firestorm, and many people (as well as
regulators and elected officials) are expressing their lack of trust
in autonomous vehicles. Commuters are not only distrustful of your
competition’s technology, but believe that autonomous vehicles at
large may be too dangerous for the streets. Your CEO has asked your team
to reevaluate the framework in which your autonomous car makes emergency
decisions.

<b>Now: Please flip a coin once (please really do this).</b>

<ul>

<li><b>If the coin came up heads</b>: in about 350 words, please write
a memo to your CEO arguing that your cars should, in an emergency with
no great options, prioritize the life of the driver and passengers
inside the car.

<li><b>If the coin came up tails</b>: in about 350 words, please write
a memo to your CEO arguing that your cars should, in an emergency with
no great options, attempt to minimize total injuries.

</ul>
<p>
Please make sure your position is clear, make a well-structured
argument, and feel free to use bullets, bolded headings, and other
signals to guide the reader. If you believe there are worthwhile
counterarguments to your position, please acknowledge the strongest
counterarguments and explain why they are mistaken. Please cite real-world
examples as appropriate to make your case.
END

print q{<div class="well">Here are some examples of persuasive writing you may find helpful and may choose to emulate:
<ul>
<li><a href="https://cs181.keithw.org/yoyodyne.pdf">Example persuasive memo at Stanford</a>
<li><a href="http://web.cs.ucdavis.edu/~rogaway/papers/moral.html">Rogaway&rsquo;s &ldquo;The Moral Character of Cryptographic Work&rdquo;</a>
<li><a href="http://laurakipnis.com/wp-content/uploads/2010/08/My-Title-IX-Inquisition-The-Chronicle-Review-.pdf">Laura Kipnis&rsquo;s &ldquo;My Title IX Inquisition&rdquo;</a>
<li><a href="http://www.columbia.edu/~col8/lobsterarticle.pdf">David Foster Wallace&rsquo;s &ldquo;Consider the Lobster&rdquo;</a>
<li><a href="http://www.utilitarian.net/singer/by/1972----.htm">Peter Singer&rsquo;s &ldquo;Famine, Affluence, and Morality&rdquo;</a>

</ul></div><p>};

print q{Please save your memo before noon on Thursday, October 11.<p><hr><p>};

my $text = qq{<b>Coin came up:</b> [please fill in heads or tails]<p>};

my $text = qq{<b>From:</b> ${display_name}<br><b>To: CEO</b><b>Subject: </b><br>br>};
my $timestamp = q{never};

my $lastversion = $dbh->prepare( q{SELECT contents, EXTRACT(EPOCH FROM submitted) AS timestamp FROM writing WHERE sunetid = ? AND assignment = ? ORDER BY submitted DESC LIMIT 1} ) or die qq{$DBI::errstr};

$lastversion->execute( $sunetid, q{car} ) or die qq{$DBI::errstr};

if ( my $data = $lastversion->fetchrow_hashref ) {
    $text = HTML::Entities::encode_entities( $data->{ contents } );
    $timestamp = POSIX::strftime( q{%B %e, %I:%M %p}, localtime $data->{ timestamp } );
    $timestamp =~ s{AM}{a.m.}g;}
    $timestamp =~ s{PM}{p.m.}g;


print <<"END";
<script type="text/javascript">
var update_wordcount = function( text ) {
   text2 = text.replace( /[ \\t\\n]+/g, " " );
   var wordcount = text2.split( " " ).length;
   wordcount = Math.round( wordcount / 10.0 ) * 10;
   document.getElementById("wordcount").innerHTML = wordcount;
};

var orig_text = "";

var reset_orig_text = function() {
   orig_text = document.getElementById("trix-editor").editor.element.innerHTML;
};

var is_clean = function() {
   return orig_text === document.getElementById("trix-editor").editor.element.innerHTML;
};

var update_dirty = function() {
   document.getElementById("dirty").innerHTML = is_clean() ? "" : "(you have unsaved changes)";
   document.getElementById("submitbutton").disabled = is_clean();
};

document.addEventListener("trix-change", function() { update_wordcount( document.getElementById("trix-editor").editor.getDocument().toString() ); update_dirty(); } );

document.addEventListener("trix-initialize", function() {
   update_wordcount( document.getElementById("trix-editor").editor.getDocument().toString() );
   reset_orig_text();
   update_dirty();
} );

window.addEventListener("beforeunload", function( event ) {
   if ( !is_clean() ) {
      event.preventDefault();
      event.returnValue = "You have unsaved changes.";
      return "You have unsaved changes.";
   }
});
</script>

<style type="text/css">
#submitbutton[disabled] {
        cursor: not-allowed;
        pointer-events: none;

        /*Button disabled - CSS color class*/
        color: #c0c0c0;
}
</style>

<form action='/submit' method='post' onsubmit="reset_orig_text()">
<input id='default' type='hidden' name='content' value='${text}'>
<trix-editor id='trix-editor' input='default'></trix-editor>
<input name='assignment' type='hidden' value='car'><br>
<div class="col-md-7"><span class="text-muted">Word count:</span> about <span id="wordcount"></span>.<br><span class="text-muted">Last saved:</span> ${timestamp}</span> <span id="dirty"></span></div>
<div class="col-md-5"><div align="right"><input id='submitbutton' type='submit' value='Save' disabled='true'><br><span class="text-muted">(can continue to edit until the deadline)</span></div></div>
</form>
END

&finish;
